[
{
	"uri": "/vi/",
	"title": "AWS RDS PostgreSQL for Developers",
	"tags": [],
	"description": "",
	"content": "AWS RDS PostgreSQL for Developers Bài thực hành này dành cho các Developers muốn tìm hiểu cách sử dụng Amazon Relational Database Service (RDS) for PostgreSQL để xây dựng và triển khai ứng dụng.\nĐiều kiện tiên quyết: Hoàn thành các bài thực hành cơ bản về AWS RDS PostgreSQL Kiến thức cơ bản về SQL Có kinh nghiệm làm việc với một ngôn ngữ lập trình như Python, Java hoặc PHP Nội dung Giới thiệu Các bước chuẩn bị Ví dụ về code dùng để kết nối cơ sở dữ liệu Triển khai Hệ thống quản lý người dùng AWS FCJ Xòa tài nguyên "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Amazon Relational Database Service (RDS) for PostgreSQL là một dịch vụ cơ sở dữ liệu được quản lý giúp dễ dàng thiết lập, vận hành và mở rộng quy mô cơ sở dữ liệu PostgreSQL. Với RDS, bạn không phải lo lắng về việc quản lý cơ sở hạ tầng cơ bản. RDS sẽ đảm nhiệm việc cung cấp, vá lỗi, sao lưu và giám sát cơ sở dữ liệu cho bạn. Điều này giúp bạn có thêm thời gian để tập trung vào việc phát triển và chạy các ứng dụng của mình. AWS RDS for PostgreSQL là một lựa chọn phổ biến dành cho các nhà phát triển vì nó cung cấp nhiều tính năng và lợi ích, bao gồm:\nScalability: RDS giúp bạn dễ dàng mở rộng quy mô cơ sở dữ liệu PostgreSQL của mình lên hoặc xuống khi cần. Bạn có thể thêm hoặc xóa phiên bản, thay đổi lớp phiên bản và sửa đổi dung lượng lưu trữ mà không cần phải ngừng hoạt động ứng dụng của mình.\nHigh availability: RDS cung cấp tính khả dụng cao cho cơ sở dữ liệu PostgreSQL của bạn với các tính năng như read replicas, multi-AZ deployments và automatic point-in-time recovery.\nSecurity: RDS cung cấp nhiều tính năng bảo mật khác nhau để giúp bảo vệ cơ sở dữ liệu PostgreSQL của bạn, bao gồm mã hóa, kiểm soát truy cập và kiểm tra.\nCost-effectiveness: RDS là một cách tiết kiệm chi phí để chạy cơ sở dữ liệu PostgreSQL. Bạn chỉ trả tiền cho những tài nguyên bạn sử dụng và bạn có thể tiết kiệm tiền bằng cách sử dụng các reserved instances. Ngoài các tính năng cốt lõi này, RDS for PostgreSQL còn cung cấp một số tính năng khác được thiết kế riêng cho nhà phát triển, chẳng hạn như:\nIntegrated tools: RDS cung cấp một số công cụ tích hợp có thể giúp bạn phát triển, quản lý và giám sát cơ sở dữ liệu PostgreSQL của mình, chẳng hạn như RDS console, the AWS CLI, và the RDS Data API.\nSupport for popular development languages and frameworks: RDS for PostgreSQL hỗ trợ nhiều ngôn ngữ và khung phát triển phổ biến, bao gồm Java, Python, PHP, Ruby và Node.js.\nCompatibility with existing PostgreSQL applications: RDS for PostgreSQL tương thích với các ứng dụng PostgreSQL hiện có, vì vậy bạn có thể di chuyển các ứng dụng của mình sang RDS mà không phải thực hiện bất kỳ thay đổi nào.\nNhìn chung, AWS RDS for PostgreSQL là dịch vụ cơ sở dữ liệu được quản lý mạnh mẽ và linh hoạt, cung cấp nhiều tính năng và lợi ích cho nhà phát triển. Nếu bạn đang tìm cách thiết lập dễ dàng, vận hành và mở rộng quy mô cơ sở dữ liệu PostgreSQL thì AWS RDS for PostgreSQL là một lựa chọn tuyệt vời.\nDưới đây là một số ví dụ cụ thể về cách các nhà phát triển có thể sử dụng AWS RDS for PostgreSQL:\nPhát triển và thử nghiệm các ứng dụng mới: Nhà phát triển có thể sử dụng RDS for PostgreSQL để tạo cơ sở dữ liệu PostgreSQL mới để phát triển và thử nghiệm một cách nhanh chóng và dễ dàng. Sau đó, họ có thể sử dụng các công cụ tích hợp để quản lý và giám sát cơ sở dữ liệu của mình. Triển khai và mở rộng quy mô ứng dụng sản xuất: Nhà phát triển có thể triển khai các ứng dụng PostgreSQL sản xuất của họ lên RDS cho PostgreSQL và tăng hoặc giảm quy mô chúng khi cần. Họ cũng có thể sử dụng các tính năng có tính sẵn sàng cao để đảm bảo rằng ứng dụng của họ luôn hoạt động. Di chuyển các ứng dụng hiện có sang RDS: Nhà phát triển có thể di chuyển các ứng dụng PostgreSQL hiện có của họ sang RDS cho PostgreSQL với thời gian ngừng hoạt động tối thiểu. Sau đó, họ có thể sử dụng các tính năng dịch vụ được quản lý để giải phóng thời gian tập trung vào việc phát triển và chạy các ứng dụng của mình. "
},
{
	"uri": "/vi/3-codeexamplefordbconnection/3-1-sampledbconnect/",
	"title": "Kết nối cơ sở dữ liệu đơn giản",
	"tags": [],
	"description": "",
	"content": "Triển khai simple code Để clone code từ GitHub, bạn có thể sử dụng lệnh sau: git clone https://github.com/hiepnguyendt/sample-database-connection.git Chỉnh sửa file .env với thông tin xác thực cơ sở dữ liệu của bạn nano .env DB_USER: \u0026lsquo;your username\u0026rsquo; DB_PASS: \u0026lsquo;your password\u0026rsquo; DB_HOST: \u0026rsquo;endpoint your RDS PostgreSQL' DB_PORT: \u0026lsquo;5432\u0026rsquo; Chạy code: npm start Bây giờ, bạn đang kết nối với RDS PostgreSQL với:\nUser: masteruser Database: pglab Port: 5432 "
},
{
	"uri": "/vi/2-preparation/2-1-setupenv/",
	"title": "Thiết lập môi trường",
	"tags": [],
	"description": "",
	"content": " Sử dụng MobaXterm để SSH tới các EC2 instance Cài đặt Node Version Manager (nvm) curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash Active nvm và cài đặt Nodejs v16 . ~/.nvm/nvm.sh\rnvm install 16 Cài đặt Git sudo yum install git -y Xác minh cài đặt npm -v\rnode -v\rgit -v Cấu hình AWS CLI của bạn Cài đặt Nodemon npm install --save-dev nodemon "
},
{
	"uri": "/vi/2-preparation/2-2-ssm/",
	"title": "AWS Secret Manager",
	"tags": [],
	"description": "",
	"content": "Tạo AWS Secrets Manager secret Secrets Manager cho phép bạn thay thế thông tin xác thực được mã hóa cứng trong mã của mình, bao gồm cả mật khẩu, bằng lệnh gọi API tới Trình quản lý bí mật để truy xuất bí mật theo chương trình. Điều này giúp đảm bảo bí mật không thể bị xâm phạm bởi ai đó đang kiểm tra mã của bạn vì bí mật đó không còn tồn tại trong mã nữa.\nTruy cập giao diện AWS Secrets Manager service console\nChọn Store a new secret.\nTại mục Choose secret type page, chọn Credentials for RDS database.\nNhập User name (masteruser) Nhập Password mà bạn đã cung cấp khi tạo cụm DB trước đó. Tiếp theo, trong phần Select which RDS database this secret will access, chọn DB instance của bạn (ví dụ: rdspg-fcj-labs). Nhấp vào Next. Đặt tên cho secret secretPostgresqlMasterUser và nhập mô tả, sau đó click Next. Hãy đảm bảo sử dụng tên chính xác (phân biệt chữ hoa chữ thường) của secretPostgresqlMasterUser để tránh phải chỉnh sửa một số câu lệnh trong bài lab sau này.\nCuối cùng, trong phần Configure automatic rotation, hãy chọn tùy chọn Disable automatic rotation. Trong môi trường production, bạn sẽ muốn sử dụng thông tin xác thực cơ sở dữ liệu tự động thay đổi để tăng cường bảo mật. Click Next.\nTrong phần Review bạn có thể kiểm tra các thông số cấu hình trước khi nó được tạo. Nhấp vào Store ở cuối màn hình.\nSau khi tạo, hãy xác định ARN mới được tạo. Giá trị này sẽ cần thiết trong các phòng thí nghiệm tiếp theo. Trong list Secrets console, nhấp vào Secret name mới tạo.\n"
},
{
	"uri": "/vi/2-preparation/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Nội dung: Thiết lập môi trường AWS Secret Manager "
},
{
	"uri": "/vi/3-codeexamplefordbconnection/3-2-autofetchingcredential/",
	"title": "Tự động tìm nạp thông tin xác thực và kết nối",
	"tags": [],
	"description": "",
	"content": "Triển khai example code Để clone code từ GitHub, bạn có thể sử dụng lệnh sau: git clone https://github.com/hiepnguyendt/Auto-fetching-instance-credentialsand-connecting.git Chỉnh sửa file .env với thông tin xác thực cơ sở dữ liệu của bạn nano .env AWS_REGION: region của bạn Chạy code: npm start Bây giờ, bạn đang kết nối với RDS PostgreSQL bằng cách Tự động tìm nạp thông tin xác thực instance từ AWS Secret Manager.\nNếu bạn gặp lỗi khi chạy mã. Bạn nên kiểm tra AWS_region trong AWS CLI\n"
},
{
	"uri": "/vi/3-codeexamplefordbconnection/",
	"title": "Ví dụ về code dùng để kết nối cơ sở dữ liệu",
	"tags": [],
	"description": "",
	"content": "Các bài thực hành trong phần này cung cấp các ví dụ triển khai để truy cập vào các phiên bản RDS PostgreSQL. Chúng có thể phục vụ như một tài liệu tham khảo cơ bản có thể được sử dụng để triển khai thực tế trong các ứng dụng.\nSimple database connection: Trong ví dụ đầu tiên, chúng ta tạo kết nối cơ sở dữ liệu đến RDS PostgreSQL instance. Các thuộc tính kết nối (DB endpoint, DB port, username và password) được tìm nạp từ các biến môi trường. Auto-fetching instance credentials and connecting: Trong ví dụ thứ hai, chúng ta tạo kết nối đến RDS PostgreSQL instance sau khi tìm nạp thuộc tính kết nối bằng cách mô tả RDS instance và tìm nạp thông tin xác thực từ Secrets Manager bằng AWS SDK. AWS_REGION được tìm nạp từ biến môi trường AWS_REGION. "
},
{
	"uri": "/vi/4-deploynodejsapp/",
	"title": "Triển khai Hệ thống quản lý người dùng AWS FCJ",
	"tags": [],
	"description": "",
	"content": "AWS FCJ User Management System – Nodejs, Express, AWS RDS PostgreSQL, AWS Secret Manager \u0026amp; Handlebars, Hệ thống quản lý người dùng là một thành phần quan trọng của nhiều ứng dụng web. Nó cho phép quản trị viên quản lý thông tin tài khoản của họ. Trong hướng dẫn này, chúng tôi sẽ xây dựng một hệ thống quản lý người dùng đơn giản bằng cách sử dụng Node.js, Express, RDS PostgreSQL và Handlebars.\nNode.js là một nền tảng phát triển ứng dụng được xây dựng trên JavaScript runtime của Chrome, cho phép bạn chạy mã JavaScript ở phía máy chủ. Nó cung cấp một môi trường thực thi đa luồng, không đồng bộ và có khả năng xử lý sự kiện, cho phép bạn xây dựng các ứng dụng mạng phía máy chủ hiệu quả. Express là một framework ứng dụng web phía máy chủ được xây dựng trên Node.js. Nó được thiết kế để đơn giản hóa việc xây dựng ứng dụng web và API bằng cách cung cấp các phương thức và công cụ giúp quản lý các yêu cầu (request) và phản hồi (response) trong ứng dụng web. RDS PostgreSQL là một dịch vụ cơ sở dữ liệu được quản lý từ Amazon Web Services (AWS) cung cấp một cách thức đáng tin cậy, có thể mở rộng và an toàn để chạy cơ sở dữ liệu PostgreSQL. AWS Secrets Manager là dịch vụ giúp bạn quản lý các bí mật, chẳng hạn như mật khẩu cơ sở dữ liệu, khóa API và các thông tin nhạy cảm khác. Điều này giúp bạn dễ dàng giữ bí mật của mình an toàn và bảo mật. Handlebars là một công cụ tạo khuôn mẫu giúp dễ dàng tạo các trang HTML động. Triển khai ứng dụng Để clone code từ GitHub, bạn có thể sử dụng lệnh sau: git clone https://github.com/hiepnguyendt/fcj-management-user.git Chỉnh sửa file .env với thông tin xác thực cơ sở dữ liệu của bạn nano .env AWS_REGION: your region Chạy code: npm start Bây giờ, bạn đang kết nối với RDS PostgreSQL bằng cách Tự động tìm nạp thông tin xác thực instance từ AWS Secret Manager.\nNếu bạn gặp lỗi khi chạy mã. Bạn nên kiểm tra AWS_region trong AWS CLI\n4.Trở lại giao diện pgAdmin4 để truy vấn dữ liệu\nCreate table fcj_user Bạn có thể sử dụng các tập lệnh SQL bên dưới để tạo bảng SQL Scripts\rCREATE TABLE fcj_user\r(\rid serial not null PRIMARY KEY, --create an auto-increment column id in a database table\rfirst_name VARCHAR(45) NOT NULL,\rlast_name VARCHAR(45) NOT NULL,\remail VARCHAR(150) NOT NULL UNIQUE,\rphone VARCHAR(15) NOT NULL,\rcourses VARCHAR(150) NOT NULL,\rstatus VARCHAR(10) NOT NULL DEFAULT \u0026#39;active\u0026#39;\r) Insert data into fcj_user table Bạn có thể sử dụng các tập lệnh SQL bên dưới để chèn dữ liệu vào bảng SQL Scripts\rINSERT INTO fcj_user\r(first_name, last_name, email, phone, courses, status)\rVALUES\r(\u0026#39;Amanda\u0026#39;, \u0026#39;Nunes\u0026#39;, \u0026#39;anunes@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Solutions Architect - Associate \u0026#39;, \u0026#39;inactive\u0026#39;),\r(\u0026#39;Alexander\u0026#39;, \u0026#39;Volkanovski\u0026#39;, \u0026#39;avolkanovski@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Developer - Associate\u0026#39;, \u0026#39;temp\u0026#39;),\r(\u0026#39;Khabib\u0026#39;, \u0026#39;Nurmagomedov\u0026#39;, \u0026#39;knurmagomedov@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Advanced Networking - Specialty\u0026#39;,\u0026#39;active\u0026#39;),\r(\u0026#39;Kamaru\u0026#39;, \u0026#39;Usman\u0026#39;, \u0026#39;kusman@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Data Analytics – Specialty\u0026#39;,\u0026#39;active\u0026#39;),\r(\u0026#39;Israel\u0026#39;, \u0026#39;Adesanya\u0026#39;, \u0026#39;iadesanya@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Database – Specialty\u0026#39;,\u0026#39;active\u0026#39;),\r(\u0026#39;Henry\u0026#39;, \u0026#39;Cejudo\u0026#39;, \u0026#39;hcejudo@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Solutions Architect - Associate\u0026#39;,\u0026#39;active\u0026#39;),\r(\u0026#39;Valentina\u0026#39;, \u0026#39;Shevchenko\u0026#39;, \u0026#39;vshevchenko@ufc.com\u0026#39;, \u0026#39;012345678910\u0026#39;, \u0026#39;AWS Certified Advanced Networking - Specialty\u0026#39;, \u0026#39;inactive\u0026#39;) Kiểm tra EC2 Instance status: Đảm bảo EC2 instance của bạn đang chạy và hoạt động bình thường. Kiểm tra ứng dụng trong trình duyệt: Mở trình duyệt web và nhập địa chỉ IP hoặc tên miền của EC2 instance, sau đó là port 5000 (ví dụ: http:// :5000). Điều này sẽ tạo kết nối tới ứng dụng của bạn chạy trên port 5000.\nTest results: Trình duyệt sẽ hiển thị ứng dụng của bạn nếu mọi thứ được cấu hình đúng và EC2 instance đang hoạt động. Nếu không, bạn cần kiểm tra lại các bước trước đó để xác định vấn đề và khắc phục.\nhttp://\u0026lt;IP address or domain name\u0026gt;:5000 Chúc mừng! Bạn đã xây dựng Hệ thống quản lý người dùng AWS FCJ trên Amazon Web Services.\n"
},
{
	"uri": "/vi/5-cleanup/",
	"title": "Xóa tài nguyên ",
	"tags": [],
	"description": "",
	"content": "\rVui lòng đảm bảo rằng bạn đã xóa tất cả tài nguyên và dịch vụ được tạo trong lab này trước khi đóng AWS console của mình\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]